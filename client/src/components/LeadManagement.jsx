import React, { useState, useEffect } from "react"
import axios from "axios"
import {
  Box,
  Button,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Typography,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Checkbox,
  FormControlLabel,
} from "@mui/material"
import EditIcon from "@mui/icons-material/Edit"
import DeleteIcon from "@mui/icons-material/Delete"

function LeadManagement() {
  const [leads, setLeads] = useState([])
  const [openDialog, setOpenDialog] = useState(false)
  const [selectedLead, setSelectedLead] = useState(null)
  const [employees, setEmployees] = useState([])
  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false)
  const [leadToDelete, setLeadToDelete] = useState(null)

  useEffect(() => {
    fetchLeads()
    fetchEmployees()
  }, [])

  const fetchLeads = async () => {
    try {
      const response = await axios.get(`${import.meta.env.VITE_API_URL}/leads`)
      setLeads(response.data)
    } catch (error) {
      console.error("Error fetching leads:", error)
    }
  }

  const fetchEmployees = async () => {
    try {
      const response = await axios.get(`${import.meta.env.VITE_API_URL}/employees`)
      setEmployees(response.data)
    } catch (error) {
      console.error("Error fetching employees:", error)
    }
  }

  const handleEdit = (lead) => {
    setSelectedLead(lead)
    setOpenDialog(true)
  }

  const handleDeleteConfirm = (leadId) => {
    setLeadToDelete(leadId)
    setDeleteConfirmOpen(true)
  }

  const handleDelete = async () => {
    try {
      await axios.delete(`${import.meta.env.VITE_API_URL}/leads/${leadToDelete}`)
      fetchLeads()
      setDeleteConfirmOpen(false)
    } catch (error) {
      console.error("Error deleting lead:", error)
    }
  }

  const handleClose = () => {
    setOpenDialog(false)
    setSelectedLead(null)
  }

  const handleSave = async (event) => {
    event.preventDefault()
    const formData = new FormData(event.target)
    const leadData = Object.fromEntries(formData.entries())

    try {
      if (selectedLead) {
        await axios.put(`${import.meta.env.VITE_API_URL}/leads/${selectedLead.lead_id}`, leadData)
      } else {
        await axios.post(`${import.meta.env.VITE_API_URL}/leads`, leadData)
      }
      fetchLeads()
      handleClose()
    } catch (error) {
      console.error("Error saving lead:", error)
    }
  }

  return (
    <Box>
      <Box sx={{ mb: 4, display: "flex", justifyContent: "space-between", alignItems: "center" }}>
        <Typography variant="h4">Lead Management</Typography>
        <Button variant="contained" onClick={() => setOpenDialog(true)}>
          Add Lead
        </Button>
      </Box>

      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Lead ID</TableCell>
              <TableCell>Date</TableCell>
              <TableCell>Leads Generated By</TableCell>
              <TableCell>Programme Name</TableCell>
              <TableCell>Maharaj Ji /Mataji Name</TableCell>
              <TableCell>Lead Handled By</TableCell>
              <TableCell>Location</TableCell>
              <TableCell>Start Date</TableCell>
              <TableCell>End Date</TableCell>
              <TableCell>Contact</TableCell>
              <TableCell>Status</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {leads.map((lead) => (
              <TableRow key={lead.lead_id}>
                <TableCell>{lead.lead_id}</TableCell>
                <TableCell>{lead.date}</TableCell>
                <TableCell>{lead.leads_generated_by}</TableCell>
                <TableCell>{lead.programme_name}</TableCell>
                <TableCell>{lead.maharaj_mataji_name}</TableCell>
                <TableCell>{lead.lead_handled_by}</TableCell>
                <TableCell>{lead.location}</TableCell>
                <TableCell>{lead.start_date}</TableCell>
                <TableCell>{lead.end_date}</TableCell>
                <TableCell>{lead.contact}</TableCell>
                <TableCell>{lead.status}</TableCell>
                <TableCell>
                  <Button onClick={() => handleEdit(lead)}>
                    <EditIcon />
                  </Button>
                  <Button onClick={() => handleDeleteConfirm(lead.lead_id)}>
                    <DeleteIcon />
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      <Dialog open={openDialog} onClose={handleClose} maxWidth="md" fullWidth>
        <DialogTitle>{selectedLead ? "Edit Lead" : "Add Lead"}</DialogTitle>
        <form onSubmit={handleSave}>
          <DialogContent>
            <TextField
              fullWidth
              label="Date"
              name="date"
              type="date"
              margin="normal"
              defaultValue={selectedLead?.date}
              InputLabelProps={{ shrink: true }}
            />
            <FormControl fullWidth margin="normal">
              <InputLabel id="leads-generated-by-label">Leads Generated By</InputLabel>
              <Select
                labelId="leads-generated-by-label"
                name="leads_generated_by"
                defaultValue={selectedLead?.leads_generated_by || ""}
              >
                {employees.map((employee) => (
                  <MenuItem key={employee.employee_id} value={employee.employee_name}>
                    {employee.employee_name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
            <TextField
              fullWidth
              label="Programme Name"
              name="programme_name"
              margin="normal"
              defaultValue={selectedLead?.programme_name}
            />
            <TextField
              fullWidth
              label="Maharaj Ji /Mataji Name"
              name="maharaj_mataji_name"
              margin="normal"
              defaultValue={selectedLead?.maharaj_mataji_name}
            />
            <TextField
              fullWidth
              label="Lead Handled By"
              name="lead_handled_by"
              margin="normal"
              defaultValue={selectedLead?.lead_handled_by}
            />
            <TextField
              fullWidth
              label="Location"
              name="location"
              margin="normal"
              defaultValue={selectedLead?.location}
            />
            <TextField
              fullWidth
              label="Start Date"
              name="start_date"
              type="date"
              margin="normal"
              defaultValue={selectedLead?.start_date}
              InputLabelProps={{ shrink: true }}
            />
            <TextField
              fullWidth
              label="End Date"
              name="end_date"
              type="date"
              margin="normal"
              defaultValue={selectedLead?.end_date}
              InputLabelProps={{ shrink: true }}
            />
            <TextField fullWidth label="Contact" name="contact" margin="normal" defaultValue={selectedLead?.contact} />
            <TextField fullWidth label="Status" name="status" margin="normal" defaultValue={selectedLead?.status} />
          </DialogContent>
          <DialogActions>
            <Button onClick={handleClose}>Cancel</Button>
            <Button type="submit" variant="contained">
              Save
            </Button>
          </DialogActions>
        </form>
      </Dialog>

      <Dialog
        open={deleteConfirmOpen}
        onClose={() => setDeleteConfirmOpen(false)}
        aria-labelledby="alert-dialog-title"
        aria-describedby="alert-dialog-description"
      >
        <DialogTitle id="alert-dialog-title">{"Confirm Delete"}</DialogTitle>
        <DialogContent>
          <Typography>Are you sure you want to delete this lead?</Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDeleteConfirmOpen(false)}>Cancel</Button>
          <Button onClick={handleDelete} autoFocus>
            Delete
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  )
}

export default LeadManagement

